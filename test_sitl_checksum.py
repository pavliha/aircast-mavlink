#!/usr/bin/env python3
"""
Test SITL checksum compatibility by sending a REQUEST_DATA_STREAM message
with the new MCRF4XX checksum (0xead1) to SITL running on port 5760
"""

import socket
import time
import struct
import binascii

def send_request_data_stream():
    # Connect to SITL
    HOST = '127.0.0.1'
    PORT = 5760
    
    print(f"Connecting to SITL at {HOST}:{PORT}...")
    
    try:
        # Create TCP socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5.0)
        sock.connect((HOST, PORT))
        print("‚úÖ Connected to SITL")
        
        # REQUEST_DATA_STREAM message as generated by aircast-mavlink with MCRF4XX CRC
        # From the test output:
        # Magic: 0xfe, Length: 6, Sequence: 0, System ID: 255, Component ID: 190
        # Message ID: 66 (REQUEST_DATA_STREAM)
        # Payload: 0x01 0x01 0x00 0x01 0x00 0x01
        # Checksum: 0xead1
        request_data_stream = bytes([
            0xfe,  # Magic byte (MAVLink v1)
            0x06,  # Payload length
            0x00,  # Sequence
            0xff,  # System ID
            0xbe,  # Component ID
            0x42,  # Message ID (66 = REQUEST_DATA_STREAM)
            0x01,  # target_system
            0x01,  # target_component
            0x00,  # req_stream_id (low byte)
            0x01,  # req_message_rate (low byte)
            0x00,  # req_stream_id (high byte)
            0x01,  # start_stop
            0xd1,  # Checksum low byte
            0xea   # Checksum high byte
        ])
        
        print(f"\nSending REQUEST_DATA_STREAM with MCRF4XX checksum 0xead1...")
        print(f"Message bytes: {' '.join(f'0x{b:02x}' for b in request_data_stream)}")
        
        sock.send(request_data_stream)
        
        # Listen for response
        print("\nListening for SITL response...")
        sock.settimeout(2.0)
        
        start_time = time.time()
        messages_received = 0
        checksum_errors = False
        
        while time.time() - start_time < 5.0:
            try:
                data = sock.recv(1024)
                if data:
                    messages_received += len([b for b in data if b in [0xfe, 0xfd]])  # Count MAVLink start bytes
                    print(f"Received {len(data)} bytes from SITL")
                    
                    # Check if SITL is sending error messages
                    if b'wrong checksum' in data or b'checksum' in data:
                        checksum_errors = True
                        print("‚ùå SITL reported checksum errors!")
                    
                    # Print first few bytes in hex
                    print(f"First 20 bytes: {' '.join(f'0x{b:02x}' for b in data[:20])}")
                    
            except socket.timeout:
                continue
        
        print(f"\nüìä Summary:")
        print(f"- Messages received: ~{messages_received}")
        print(f"- Checksum errors: {'Yes ‚ùå' if checksum_errors else 'No ‚úÖ'}")
        
        if messages_received > 0 and not checksum_errors:
            print("\nüéâ SUCCESS! SITL is accepting messages with the new MCRF4XX checksum!")
        elif messages_received == 0:
            print("\n‚ö†Ô∏è  No response from SITL - it may have rejected the message silently")
        else:
            print("\n‚ùå SITL is still reporting checksum errors")
            
    except socket.timeout:
        print("‚ùå Connection timeout - SITL may not be running")
    except ConnectionRefusedError:
        print("‚ùå Connection refused - SITL is not listening on port 5760")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        sock.close()
        print("\nConnection closed")

if __name__ == "__main__":
    print("SITL Checksum Compatibility Test")
    print("="*50)
    send_request_data_stream()