name: Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for current package.json version)'
        required: false
        type: string
      tag:
        description: 'NPM tag (latest, beta, alpha)'
        required: false
        default: 'latest'
        type: choice
        options:
        - latest
        - beta
        - alpha

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Update version if specified
      if: github.event.inputs.version != ''
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version
      
    - name: Publish to npm
      run: |
        TAG="${{ github.event.inputs.tag || 'latest' }}"
        echo "Publishing to npm with tag: $TAG"
        npm publish --tag $TAG
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create release summary
      run: |
        PACKAGE_NAME=$(npm pkg get name | tr -d '"')
        PACKAGE_VERSION=$(npm pkg get version | tr -d '"')
        
        echo "## üì¶ Package Published Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** \`$PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`$PACKAGE_VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "**Registry:** npm" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installation" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "npm install $PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`typescript" >> $GITHUB_STEP_SUMMARY
        echo "// Main parser and utilities" >> $GITHUB_STEP_SUMMARY
        echo "import { MAVLinkParser } from '$PACKAGE_NAME';" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "// Individual dialects" >> $GITHUB_STEP_SUMMARY
        echo "import { MAV_CMDEnum } from '$PACKAGE_NAME/dialects/common';" >> $GITHUB_STEP_SUMMARY
        echo "import { SomeEnum } from '$PACKAGE_NAME/dialects/ardupilotmega';" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  verify-publication:
    runs-on: ubuntu-latest
    needs: publish
    if: always() && needs.publish.result == 'success'
    
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Verify package installation
      run: |
        PACKAGE_NAME="@aircast-4g/mavlink"
        
        echo "Attempting to install $PACKAGE_NAME..."
        
        # Create a temporary project to test installation
        mkdir test-install
        cd test-install
        npm init -y
        
        # Try to install the package
        npm install $PACKAGE_NAME
        
        # Test basic functionality
        node -e "
        const lib = require('$PACKAGE_NAME');
        console.log('‚úÖ Package installed and importable');
        console.log('Available exports:', Object.keys(lib));
        
        // Test dialect imports
        const dialects = ['common', 'ardupilotmega', 'minimal', 'standard'];
        dialects.forEach(dialect => {
          try {
            const dialectModule = require(\`$PACKAGE_NAME/dialects/\${dialect}\`);
            console.log(\`‚úÖ \${dialect} dialect import successful\`);
          } catch (error) {
            console.error(\`‚ùå Failed to import \${dialect} dialect\`);
            process.exit(1);
          }
        });
        "
        
        echo "‚úÖ Package verification successful"